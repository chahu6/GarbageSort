<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.ruoyi.project.garbagesort.userInfo.mapper.UserInfMapper">
    
    <resultMap type="UserInf" id="UserInfResult">
        <result property="infId"    column="inf_id"    />
        <result property="userId"    column="user_id"    />
        <result property="nickname"    column="nickname"    />
        <result property="avatar"    column="avatar"    />
        <result property="phone"    column="phone"    />
        <result property="gender"    column="gender"    />
        <result property="userMoney"    column="user_money"    />
        <result property="orderNum"    column="order_num"    />
        <result property="registerTime"    column="register_time"    />
    </resultMap>

    <resultMap id="UserInfUsersResult" type="UserInf" extends="UserInfResult">
        <collection property="usersList" notNullColumn="sub_user_id" javaType="java.util.List" resultMap="UsersResult" />
    </resultMap>

    <resultMap type="Users" id="UsersResult">
        <result property="userId"    column="sub_user_id"    />
        <result property="phone"    column="sub_phone"    />
        <result property="password"    column="sub_password"    />
        <result property="userState"    column="sub_user_state"    />
        <result property="createTime"    column="sub_create_time"    />
        <result property="modifiedTime"    column="sub_modified_time"    />
    </resultMap>

    <sql id="selectUserInfVo">
        select inf_id, user_id, nickname, avatar, phone, gender, user_money, order_num, register_time from user_inf
    </sql>

    <select id="selectUserInfList" parameterType="UserInf" resultMap="UserInfResult">
        <include refid="selectUserInfVo"/>
        <where>  
            <if test="userId != null "> and user_id = #{userId}</if>
            <if test="nickname != null  and nickname != ''"> and nickname like concat('%', #{nickname}, '%')</if>
            <if test="avatar != null  and avatar != ''"> and avatar = #{avatar}</if>
            <if test="phone != null  and phone != ''"> and phone = #{phone}</if>
            <if test="gender != null  and gender != ''"> and gender = #{gender}</if>
            <if test="userMoney != null "> and user_money = #{userMoney}</if>
            <if test="orderNum != null "> and order_num = #{orderNum}</if>
            <if test="registerTime != null "> and register_time = #{registerTime}</if>
        </where>
    </select>
    
    <select id="selectUserInfById" parameterType="Long" resultMap="UserInfUsersResult">
        select a.inf_id, a.user_id, a.nickname, a.avatar, a.phone, a.gender, a.user_money, a.order_num, a.register_time,
            b.user_id as sub_user_id, b.phone as sub_phone, b.password as sub_password, b.user_state as sub_user_state, b.create_time as sub_create_time, b.modified_time as sub_modified_time
        from user_inf a
        left join users b on b.user_id = a.inf_id
        where a.inf_id = #{infId}
    </select>
        
    <insert id="insertUserInf" parameterType="UserInf" useGeneratedKeys="true" keyProperty="infId">
        insert into user_inf
        <trim prefix="(" suffix=")" suffixOverrides=",">
            <if test="userId != null">user_id,</if>
            <if test="nickname != null">nickname,</if>
            <if test="avatar != null">avatar,</if>
            <if test="phone != null and phone != ''">phone,</if>
            <if test="gender != null and gender != ''">gender,</if>
            <if test="userMoney != null">user_money,</if>
            <if test="orderNum != null">order_num,</if>
            <if test="registerTime != null">register_time,</if>
         </trim>
        <trim prefix="values (" suffix=")" suffixOverrides=",">
            <if test="userId != null">#{userId},</if>
            <if test="nickname != null">#{nickname},</if>
            <if test="avatar != null">#{avatar},</if>
            <if test="phone != null and phone != ''">#{phone},</if>
            <if test="gender != null and gender != ''">#{gender},</if>
            <if test="userMoney != null">#{userMoney},</if>
            <if test="orderNum != null">#{orderNum},</if>
            <if test="registerTime != null">#{registerTime},</if>
         </trim>
    </insert>

    <update id="updateUserInf" parameterType="UserInf">
        update user_inf
        <trim prefix="SET" suffixOverrides=",">
            <if test="userId != null">user_id = #{userId},</if>
            <if test="nickname != null">nickname = #{nickname},</if>
            <if test="avatar != null">avatar = #{avatar},</if>
            <if test="phone != null and phone != ''">phone = #{phone},</if>
            <if test="gender != null and gender != ''">gender = #{gender},</if>
            <if test="userMoney != null">user_money = #{userMoney},</if>
            <if test="orderNum != null">order_num = #{orderNum},</if>
            <if test="registerTime != null">register_time = #{registerTime},</if>
        </trim>
        where inf_id = #{infId}
    </update>

    <delete id="deleteUserInfById" parameterType="Long">
        delete from user_inf where inf_id = #{infId}
    </delete>

    <delete id="deleteUserInfByIds" parameterType="String">
        delete from user_inf where inf_id in 
        <foreach item="infId" collection="array" open="(" separator="," close=")">
            #{infId}
        </foreach>
    </delete>
    
    <delete id="deleteUsersByUserIds" parameterType="String">
        delete from users where user_id in 
        <foreach item="userId" collection="array" open="(" separator="," close=")">
            #{userId}
        </foreach>
    </delete>

    <delete id="deleteUsersByUserId" parameterType="Long">
        delete from users where user_id = #{userId}
    </delete>

    <insert id="batchUsers">
        insert into users( user_id, phone, password, user_state, create_time, modified_time) values
		<foreach item="item" index="index" collection="list" separator=",">
            ( #{item.userId}, #{item.phone}, #{item.password}, #{item.userState}, #{item.createTime}, #{item.modifiedTime})
        </foreach>
    </insert>

</mapper>